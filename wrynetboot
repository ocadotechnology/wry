#!/usr/bin/env python2

# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

# encoding: utf-8
'''
wrynetboot -- PXE Boot an AMT machine

wrynetboot is a tool to cause an AMT machine to restart and boot from a
network boot server

@author:     Adrian Hungate

@copyright:  2017 Ocado Technology. All rights reserved.

@license:    Apache 2.0

@contact:    adrian.hungate@ocado.com
'''

import sys
import os
import wry

from argparse import ArgumentParser
from argparse import RawDescriptionHelpFormatter

__all__ = []
__version__ = 0.1
__date__ = '2017-07-04'
__updated__ = '2017-07-04'

DEBUG = 0
TESTRUN = 0
PROFILE = 0

class CLIError(Exception):
    '''Generic exception to raise and log different fatal errors.'''
    def __init__(self, msg):
        super(CLIError).__init__(type(self))
        self.msg = "E: %s" % msg
    def __str__(self):
        return self.msg
    def __unicode__(self):
        return self.msg

def main(argv=None): # IGNORE:C0111
    '''Command line options.'''

    if argv is None:
        argv = sys.argv
    else:
        sys.argv.extend(argv)

    program_name = os.path.basename(sys.argv[0])
    program_version = "v%s" % __version__
    program_build_date = str(__updated__)
    program_version_message = '%%(prog)s %s (%s)' % (program_version, program_build_date)
    program_shortdesc = __import__('__main__').__doc__.split("\n")[1]
    program_license = '''%s

  Created by Adrian Hungate on %s.
  Copyright 2017 Ocado Technology. All rights reserved.

  Licensed under the Apache License 2.0
  http://www.apache.org/licenses/LICENSE-2.0

  Distributed on an "AS IS" basis without warranties
  or conditions of any kind, either express or implied.

USAGE
''' % (program_shortdesc, str(__date__))

    try:
        # Setup argument parser
        parser = ArgumentParser(description=program_license, formatter_class=RawDescriptionHelpFormatter)
        parser.add_argument("-v", "--verbose", dest="verbose", action="count", help="set verbosity level [default: %(default)s]", default=False)
        parser.add_argument("-H", "--host", dest="host", help="host to connect to. [default: %(default)s]", metavar="name/ip")
        parser.add_argument("-s", "--ssl", dest="ssl", help="connect using ssl. [default: %(default)s]", default=False)
        parser.add_argument("-n", "--name", dest="name", help="name to login as. [default: %(default)s]", metavar="name", default="admin")
        parser.add_argument("-p", "--password", dest="password", help="login password. [default: %(default)s]", metavar="password")
        parser.add_argument('-V', '--version', action='version', version=program_version_message)

        # Process arguments
        args = parser.parse_args()

        host = args.host
        if args.ssl:
            scheme = "https"
        else:
            scheme = "http"
        name = args.name
        password = args.password
        verbose = args.verbose

        if verbose > 0:
            print("Verbose mode on")

        dev = wry.AMTDevice(host, scheme, name, password)
        dev.boot.medium = "Network"
        power = dev.power.state.state
        if power == "off":
            dev.power.turn_on()
        else:
            dev.power.reset()

        return 0
    except KeyboardInterrupt:
        ### handle keyboard interrupt ###
        return 0
    except Exception, e:
        if DEBUG or TESTRUN:
            raise(e)
        indent = len(program_name) * " "
        sys.stderr.write(program_name + ": " + repr(e) + "\n")
        sys.stderr.write(indent + "  for help use --help")
        return 2

if __name__ == "__main__":
    if DEBUG:
        sys.argv.append("-v")
    if TESTRUN:
        import doctest
        doctest.testmod()
    if PROFILE:
        import cProfile
        import pstats
        profile_filename = 'dump_profile.txt'
        cProfile.run('main()', profile_filename)
        statsfile = open("profile_stats.txt", "wb")
        p = pstats.Stats(profile_filename, stream=statsfile)
        stats = p.strip_dirs().sort_stats('cumulative')
        stats.print_stats()
        statsfile.close()
        sys.exit(0)
    sys.exit(main())